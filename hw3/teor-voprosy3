(1)
Примитивные: number, BigInt, string, boolean, null, undefined, symbol
Ссылочные: objects

(2)
var - 
функциональная область видимости,
hoisting - можно вызвать до объявления(значение будет undefined), 
многократно инициализируется, можно переопределить

let, const -
блочная область видимости
нет всплытия, есть временная мертвая зона - недоступна до объявления
нельзя переопределить
const обязательно значение при инициализации и потом не изменяется

strict mode:
Запрет на использование необъявленных переменных,
Запрет на удаление переменных, функций или аргументов,
Запрет на дублирование параметров функции,
Запрет на использование зарезервированных слов,
Изменение поведения this:
В строгом режиме this в глобальной области видимости или в функциях, вызванных без контекста, будет undefined, а не глобальный объект (window в браузере).

(3)
TDZ — это период времени между началом блока, в котором объявлена переменная, и моментом её инициализации. В течение этого времени доступ к переменной приведёт к ошибке.

(4)
boxing:
-Когда вы вызываете метод или свойство на примитиве.
-Когда вы передаёте примитив в функцию, которая ожидает объект.

let str = "Привет";
alert( str.toUpperCase() ); // ПРИВЕТ
Строка str – примитив. В момент обращения к его свойству, создаётся специальный объект, который знает значение строки и имеет такие полезные методы, как toUpperCase().
Этот метод запускается и возвращает новую строку (показывается в alert).
Специальный объект удаляется, оставляя только примитив str.

unboxing:
это процесс преобразования объекта обратно в примитивное значение. Это может происходить автоматически или явно.

-Когда объект используется в операциях, которые требуют примитивного значения (например, арифметические операции).
-Когда вы вызываете методы, такие как valueOf() или toString()

(5)
Приведение типов  — это автоматическое или явное преобразование значения одного типа в значение другого типа.

Правила неявного приведения типов:
    Строки и числа:
Если один из операндов — строка, другой преобразуется в строку (для сложения).
Если оператор арифметический (-, *, /), оба операнда преобразуются в числа.
    Булевы значения:
В логических контекстах:
false, 0, "", null, undefined, NaN преобразуются в false.
Все остальные значения преобразуются в true.
    Сравнение с ==:
Если типы операндов разные, JavaScript пытается преобразовать их к одному типу.
Например, null == undefined возвращает true, а "5" == 5 также возвращает true.
    Сравнение с ===:
Строгое сравнение без приведения типов. Типы и значения должны быть одинаковыми.

(6)
Символ (symbol) – примитивный тип данных, использующийся для создания уникальных идентификаторов.. symbol гарантированно уникальны. используются как ключи для свойств объектов.
Свойства, чьи ключи – символы, не перебираются циклом for..in. Object.keys(user) также игнорирует символы.

Глобальные символы - символы содержащиеся в глобальном реестре символов. Мы можем создавать в нём символы и обращаться к ним позже, и при каждом обращении нам гарантированно будет возвращаться один и тот же символ.
 Для чтения (или, при отсутствии, создания) символа из реестра используется вызов Symbol.for(key). 
 Он проверяет глобальный реестр и, при наличии в нём символа с именем key, возвращает его, иначе же создаётся новый символ Symbol(key) и записывается в реестр под ключом key.
 «Скрытые» свойства объектов.

Если мы хотим добавить свойство в объект, который «принадлежит» другому скрипту или библиотеке, мы можем создать символ и использовать его в качестве ключа. 
Символьное свойство не появится в for..in, так что оно не будет нечаянно обработано вместе с другими. 
Также оно не будет модифицировано прямым обращением, так как другой скрипт не знает о нашем символе. 
Таким образом, свойство будет защищено от случайной перезаписи или использования.
Так что, используя символьные свойства, мы можем спрятать что-то нужное нам, но что другие видеть не должны.

(7)
Symbol.toPrimitive - встроенный системный символ. содержит правила по которым объект приводится к примитивному типу.

(8)
Приведение к строке - String() или метод .toString()
Приведение к числу - Number(), parseInt() или parseFloat()
parseInt и parseFloat пытаются извлечь число из строки, даже если она содержит нечисловые символы (например, "10px"). Number вернет NaN, если строка содержит нечисловые символы.
Приведение к логическому типу - Boolean()
false, 0, "", null, undefined, NaN приводятся к false.
Все остальные значения приводятся к true.
Приведение к объекту - Object()
Приведение к массиву - метод Array.from() или оператор [...]

(9) 
смотреть вопрос (2)

(10)
Затемнение переменных — это ситуация, когда переменная во внутренней области видимости перекрывает переменную с тем же именем во внешней области видимости.