(1) 
OPTIONS -клиент отправляет url ресурса, сервер возвращает заголовок Allow с списком поддерживаемых методов. 
Используется в CORS перед отправкой основного запроса, для получения настроек CORS(разрешены ли запрошенный метод, заголовки и источник запроса.)

Клиент отправляет запрос OPTIONS на сервер. Запрос может включать следующие заголовки:
Host: Указывает домен и порт сервера.
Origin: Указывает источник запроса (используется в CORS).
Access-Control-Request-Method: Указывает метод, который будет использоваться в основном запросе (например, POST, PUT).
Access-Control-Request-Headers: Указывает заголовки, которые будут использоваться в основном запросе (например, Content-Type, Authorization).

Ответ от сервера:
Сервер отвечает, указывая поддерживаемые методы и настройки CORS. Основные заголовки в ответе:
Allow: Список поддерживаемых методов для ресурса (например, GET, POST, OPTIONS).
Access-Control-Allow-Methods: Список методов, разрешённых для кросс-доменных запросов.
Access-Control-Allow-Headers: Список заголовков, разрешённых для кросс-доменных запросов.
Access-Control-Allow-Origin: Указывает, какие домены могут обращаться к ресурсу (например, * для всех доменов или конкретный домен).
Access-Control-Max-Age: Указывает, как долго (в секундах) результаты предварительного запроса могут кэшироваться.

(2)
HTTP 2

-Бинарный протокол (вместо текстового)
-Мультиплексирование (http1 новое соединение для каждого запроса и последовательно, http2 несколько запросов одновременно! в рамках одного соединения)
-Сжатие заголовков
-Приоритизация запросов(клиент может указать приоритеты, что сервер оптимизировал порядок обработки. пример: CSS и JS длжны загружаться раньше изображений)
-Server Push (сервер может отправить данные до того как они будут запрошены, например клиент запросил HTML, сервер протолкнет связанные CSS JS )
-Безопасность(почти всегда TLS)

HTTP 3

-QUIC(UDP) вместо TCP
-TLS обязателен на уровне протокола
-Решение проблемы блокировки начала очереди(даже если потерян один пакет, это не влияет на доступность остальных)

-Быстрее устанавливается соединение(установка соединения и установка шифрования объединены в один шаг, а не два как http2) 
HTTP/2:
Требуется 1 RTT для установления TCP-соединения.
Затем еще 1-2 RTT для установления TLS-соединения.
Итого: 2-3 RTT до начала передачи данных.
HTTP/3 (QUIC):
В большинстве случаев установление соединения занимает 1 RTT (или даже 0 RTT при повторном подключении к тому же серверу).
Это достигается за счет объединения установления соединения и шифрования в один этап.

-Встроенная поддержка изменения IP-адресов(например: переключение wifi и мобильной связи)

(3)
AbortController — это встроенный объект, который позволяет отменять выполнение любых операций.С его помощью можно: 
-отменять fetch запросы
-удалять обработчики событий
-останавливать стримы
-прерывать любые другие операции

Состоит из:

-Метода abort([reason]) для отмены операции, где reason - необязательный параметр.
При вызове метода abort([reason]) reason будет доступен через signal.reason. В reason можно передать любое значение: строку, число, объект, ошибку и т.д.

-Свойства signal, возвращает объект, который является экземпляром AbortSignal со следующими свойствами и методами:
aborted - булево значение, указывающее было ли выполнено прерывание;
reason - причина отмены;
onabort - обработчик события отмены;
throwIfAborted() - выбрасывает ошибку с причиной отмены, если сигнал в состоянии "отменён". 

(4)
Вызов переменных let const до их объявления вызовет Refference error. Для var вернет undefined(значение инициализируется только в момент выполнения строки с объявлением), hoisting. 